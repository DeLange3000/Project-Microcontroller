
AVRASM ver. 2.2.8  D:\VUB\MA1\Sensors and Microsystem Electronics\Project Microcontroller\Tasks\Themerin\main.asm Fri Jul 21 18:58:24 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\VUB\MA1\Sensors and Microsystem Electronics\Project Microcontroller\Tasks\Themerin\main.asm(52): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
D:\VUB\MA1\Sensors and Microsystem Electronics\Project Microcontroller\Tasks\Themerin\main.asm(52): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Themerin.asm
                                 ;
                                 ; Created: 8/05/2023 14:05:11
                                 ; Author : warre
                                 ;
                                 
                                 ;
                                 ; Task_1.asm
                                 ;
                                 ; Created: 15/02/2023 14:14:20
                                 ; Author : warre
                                 ;
                                 
                                 
                                 // FEATURE OVERVIEW
                                 // - load screen using character buffer (buzzer does not work in loading screen)
                                 // - Press A to start game press 0 to go to menu
                                 // - move joystick up/down to select frequency in scale (position regions of joystick mapped to different frequencies)
                                 // - point on screen indicates position of joystick
                                 // - press C to make a sound (play a note). Point on screen gets tail
                                 // - game where you try to stay within bounds. Play notes when bounds are visible on point
                                 // - generate bounds by programming a song in memory
                                 // - receive score based on how well you did (+1 for each time you are inside the borders)
                                 
                                 // TO DO
                                 // - generation of bounds
                                 // -> PROBLEMS: - working with 80 bit long screen (bottom and top are wrongly shown)
                                 //				- flickering? 
                                 //				- border length should adjust at edge of window
                                 // -> SOLUTION: 1) flickering solved by redoing screen drawing function (reduced amount of memory loads)
                                 //				2) check if bound should be drawn => OK
                                 //				3) check if upper and lower bound should be drawn in the bottom part of the screen => OK
                                 //				4) condition to check when next border should be drawn => OK
                                 //				5) recalculate border length at edge of screen => OK
                                 //
                                 // - implementation of score (+1 for each time you are inside the borders => no danger of overflow due to border length limitations)
                                 // -> register indicates if tone is in right position
                                 // -> evaluate score during TIMER1 interrupt
                                 //
                                 // - clean up score display
                                 // - fix score calculation
                                 
                                 // BOUNDS
                                 // - upper bound defines also lower bound (-2)
                                 // - store in memory bound height and length
                                 // - CHANGE R28 AND R6 WHEN CHANGING AMOUNT OF BOUNDS!!!!!!!!!!!!!!!!!!!!!!!
                                 
                                 	//display: top is 1 bottom is 7 (0 is not on display)
                                 
                                 ; Definition file of the ATmega328P
                                 .include "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;register definitions
                                 
                                 ; constants
                                 
                                 ;Boot code
000000 c020                      .org 0x0000 rjmp init //ORDER IS IMPORTANT (smallest adress first)
                                 ; Interrupt address vectors
00001a c1fe                      .org 0x001A rjmp TIM1_OVF // timer1 interrupt
000020 c1ea                      .org 0x0020 rjmp TIM0_OVF_ISR // timer2 interrupt
                                 
                                 init:
                                 // ------------------ SETUP ---------------------------
                                 	//keyboard
000021 9a50                      	SBI DDRD, 0
000022 9a58                      	SBI PORTD, 0
                                 
000023 9a51                      	SBI DDRD, 1
000024 9a59                      	SBI PORTD, 1
                                 
000025 9a52                      	SBI DDRD, 2
000026 9a5a                      	SBI PORTD, 2
                                 
000027 9a53                      	SBI DDRD, 3
000028 9a5b                      	SBI PORTD, 3
                                 
000029 9854                      	CBI DDRD, 4
00002a 9a5c                      	SBI PORTD, 4
                                 
00002b 9855                      	CBI DDRD, 5
00002c 9a5d                      	SBI PORTD, 5
                                 
00002d 9856                      	CBI DDRD, 6
00002e 9a5e                      	SBI PORTD, 6
                                 
00002f 9857                      	CBI DDRD, 7
000030 9a5f                      	SBI PORTD, 7
                                 
                                 	// buzzer
000031 9a21                      	SBI DDRB, 1
000032 9a29                      	SBI PORTB, 1
                                 
                                 	// joystick button
                                 /*	CBI DDRB, 2
                                 	SBI PORTB, 2*/
                                 
                                 	// display
000033 9a23                      	sbi DDRB, 3
000034 9a2b                      	sbi PORTB, 3
                                 
000035 9a25                      	sbi DDRB, 5
000036 9a2d                      	sbi PORTB, 5
                                 
000037 9a24                      	sbi DDRB, 4
000038 9a2c                      	sbi PORTB, 4
                                 
                                 	// adc input
                                 /*	CBI DDRC, 0
                                 	CBI PORTC, 0
                                 
                                 	CBI DDRC, 1
                                 	CBI PORTC, 1*/
                                 
                                 	// leds
000039 9a3a                      	SBI DDRC, 2
00003a 9a42                      	SBI PORTC, 2
                                 
00003b 9a3b                      	SBI DDRC, 3
00003c 9a43                      	SBI PORTC, 3
                                 
                                 	//set c pins as input for joystick
00003d 9839                      	cbi ddrc, 1
00003e 9838                      	cbi ddrc ,0
                                 
                                 	// buzzer setup
00003f eb59                      	LDI R21, 185 ; register 21 controls frequency
000040 bd56                      	out TCNT0, R21
                                 
000041 e003                      	ldi r16, 0b00000011
000042 bd05                      	out TCCR0B,r16 ; Timer clock = system clock / 64
000043 e001                      	ldi r16,1<<TOV0
000044 bb05                      	out TIFR0,r16 ; Clear TOV0/ Clear pending interrupts
000045 e001                      	ldi r16,1<<TOIE0
000046 9300 006e                 	sts TIMSK0,r16 ; Enable Timer/Counter0 Overflow Interrupt
                                 
                                 	// timer1 setup (used to refresh screen)
                                 	// only overflow is used
000048 ee0f                      	ldi r16, 0xEF; register 21 controls frequency
000049 9300 0085                 	sts TCNT1H, r16
00004b ef0f                      	ldi r16, 0xFF
00004c 9300 0084                 	sts TCNT1L, r16
00004e e003                      	ldi r16, 0b00000011
00004f 9300 0081                 	sts TCCR1B,r16 ; Timer clock = system clock / 1024
000051 e001                      	ldi r16,1<<TOV1
000052 9300 0016                 	sts TIFR1,r16 ; Clear TOV1/ Clear pending interrupts
000054 e001                      	ldi r16,1<<TOIE1
000055 9300 006f                 	sts TIMSK1,r16 ; Enable Timer/Counter1 Overflow Interrupt
                                 
                                 	// ADC setup
000057 ef0f                      	ldi r16, 0b11111111
000058 9300 007e                 	sts didr0, r16
                                 
00005a ef0f                      	ldi r16, 0b11111111
00005b 9300 007f                 	sts didr1, r16
                                 
00005d e000                      	ldi r16, 0b00000000
00005e 9300 0064                 	sts prr, r16
                                 
000060 ee02                      	ldi r16, 0b11100010
000061 9300 007a                 	sts ADCSRA, r16
                                 
000063 e601                      	ldi r16, 0b01100001 ; last 0001 for adc1 (Joystick up/down)
000064 9300 007c                 	sts ADMUX, r16
                                 	
000066 e000                      	ldi r16, 0b00000000
000067 9300 007b                 	sts ADCSRB, r16
                                 
                                 	//SEI ; enable interrupts
                                 	
                                 
000069 c007                      	rjmp load_menu
                                 
                                 // used global registers: r20 (height of note on screen), r21 (buzzer frequency)
                                 // used registers for tail chase r0, r1, r2, r3, r4
                                 // registers for borders: r10 -> r16, r19
                                 // register for border counter: r25, r28
                                 // used registers for load menu: r20, r21, r22, r18, r24
                                 // used register to indicate end of the game: r28
                                 // used registers for score: r14, r15
                                 
                                 // ------------------- LOAD MENU ------------------------------
                                 load_menu_setup:
00006a 94f8                      CLI //disable interrupts so that buzzer does not work in load menu
00006b e040                      ldi r20, 0
00006c 2e04                      mov r0, r20 // initialize tail (placed here so tail is gone after reloading)
00006d 2e14                      mov r1, r20
00006e 2e24                      mov r2, r20
00006f 2e34                      mov r3, r20
000070 2e44                      mov r4, r20
                                 
                                 load_menu:
000071 e0d1                      ldi yh, high(0x010F) // last char should be send first on screen
000072 e0cf                      ldi yl, low(0x010F)
000073 e140                      ldi r20, 16 // 16 blocks fill the entire screen
000074 e028                      ldi r18, 8 // select row
000075 e788                      ldi r24, 120 // block offset initial value
000076 e060                      ldi r22, 0 // offset for each seperate line in memory
                                 
                                 Blockloop:
000077 e018                      	ldi r17, 8 // offset for each block in memory
000078 915a                      	ld r21, -y //predecrement Y and load char value pointed to by Y
000079 e0f4                      	ldi zh, high(CharTable<<1) // load adress table of char into Z
00007a e7ea                      	ldi zl, low(CharTable<<1)
                                 	//calculate offset in table for char
00007b 0fe6                      	add zl, r22 // line offset
00007c f408                      	brcc next_addition
00007d 95f3                      	inc zh // carry for word
                                 	next_addition:
00007e 0fe8                      	add zl, r24 // block offset
00007f f408                      	brcc load_data
000080 95f3                      	inc zh // carry for word
                                 	load_data:
                                 	// load column data
000081 9154                      	lpm r21, z
000082 e075                      	ldi r23, 5 // only 5 pixels of each line of block is put on the stack
                                 	// send bits to shift register
                                 	BlockColloop:
000083 982b                      	cbi portb, 3 //turn pixel off
000084 9488                      	clc // clear carry flag
000085 9557                      	ror r21
000086 f408                      	brcc CarryIs1 //skip line if C = 0
000087 9a2b                      	sbi portb, 3 // turn pixel on
                                 	CarryIs1:
000088 982d                      	cbi portb, 5 // put pixel in shift register
000089 9a2d                      	sbi portb, 5
00008a 957a                      	dec r23 // only 5 pixels of each line of block is put on the stack
00008b f7b9                      	brne BlockColloop
                                 
00008c 5088                      	subi r24, 8 // decrease blockoffset with 8
00008d 954a                      	dec r20 // decrease block counter
00008e f741                      	brne blockloop
00008f c001                      	rjmp loop2_menu
                                 
                                 	jump_to_load_menu_setup:
000090 cfd9                      	rjmp load_menu_setup
                                 
                                 	loop2_menu:
000091 1712                      		cp r17, r18
000092 f411                      		brne skip_menu
000093 9a2b                      		sbi PORTB, 3
000094 c001                      		rjmp setrow_menu
                                 		skip_menu:
000095 982b                      		cbi PORTB, 3
                                 		setrow_menu:
000096 982d                      		cbi PORTB, 5
000097 9a2d                      		sbi PORTB, 5
000098 951a                      		dec r17
000099 f7b9                      		brne loop2_menu
                                 
00009a e140                      	ldi r20, 16 // reset r20 back to 16 for next line of screen
00009b e788                      	ldi r24, 120 // reset r24 back to 120 for next line of screen
00009c 9a2c                      	sbi portb, 4
00009d 982c                      	cbi portb, 4
00009e 9563                      	inc r22 // increase line offset => next line of each block is read from memory for next line on display
00009f 952a                      	dec r18 // decrease line "selector" of display
0000a0 f6b1                      	brne Blockloop
                                 
                                 	// PRESS A TO START
0000a1 9a58                      	SBI PORTD, 0 //check row 3
0000a2 9a59                      	SBI PORTD, 1
0000a3 9a5a                      	SBI PORTD, 2
0000a4 985b                      	CBI PORTD, 3
0000a5 9b4c                      		SBIS PIND, 4 // if A is pressed, jump to main
0000a6 c001                      		rjmp setup_main
0000a7 cfc9                          rjmp load_menu
                                 
                                 
                                 // ------------------ DISPLAY --------------------------
                                 setup_main:
0000a8 9478                      SEI // enable interrupts (timer0 and timer1)
0000a9 9a5b                      SBI PORTD, 3 // turn off row 3 (otherwise can glitch back to main menu when pressing "C")
0000aa e040                      ldi r20, 0 // reset position of pixel set by joystick
0000ab e090                      ldi r25, 0 // reset counter that sets the position of the boundaries on the screen
0000ac 2e59                      mov r5, r25 // r15 keeps track of the score (reset to zero)
0000ad 2ee9                      mov r14, r25 // register 14 is used to keep track wether the joystick is inbetween the borders
                                 main:
                                 
                                 ; runs through all lines of display and checks wether a pixel should be on
0000ae e028                      	ldi r18, 8 ; select row
0000af e5c0                      	ldi r28, 80 //2 * rows * #borders (this is used to check whether no bounds are on the screen => no bounds means end of game)
                                 	outer_loop: 
0000b0 e510                      		ldi r17, 80 // select column
0000b1 3021                      		cpi r18, 1 // only convert joystick position to frequency when row 1 of display is selected (no need to do it for each row of the display)
0000b2 f411                      		brne continue
0000b3 940e 0142                 		call get_tone // translates position of joystick into a discrete set of frequencies
                                 		continue:
0000b5 940e 017e                 		call drawing // draws position of joystick + it's tail + borders
                                 
                                 		next_loop:
0000b7 e018                      		ldi r17, 8
                                 		loop2:
0000b8 1712                      			cp r17, r18
0000b9 f411                      			brne skip
0000ba 9a2b                      			sbi PORTB, 3
0000bb c001                      			rjmp setrow
                                 			skip:
0000bc 982b                      			cbi PORTB, 3
                                 			setrow:
0000bd 982d                      			cbi PORTB, 5
0000be 9a2d                      			sbi PORTB, 5
0000bf 951a                      			dec r17
0000c0 f7b9                      			brne loop2
                                 
0000c1 9a2c                      		SBI PORTB, 4 // enable each row
0000c2 982c                      		CBI PORTB, 4
0000c3 952a                      		dec r18
0000c4 f759                      	brne outer_loop
                                 
0000c5 30c0                      	cpi r28, 0 // if r28 is 0 => no borders on screen => game has end
0000c6 f041                      	breq score_menu_setup // jump to load screen if game has ended
                                 
0000c7 9a58                      	SBI PORTD, 0 //check row 3
0000c8 9a59                      	SBI PORTD, 1
0000c9 985a                      	CBI PORTD, 2
0000ca 9a5b                      	SBI PORTD, 3
0000cb 9b4c                      		SBIS PIND, 4 // if 0 is pressed, jump to loadscreen
0000cc cf9d                      		rjmp load_menu_setup
0000cd 9a5a                      		SBI PORTD, 2 // turn of row 3 to avoid glitches
0000ce cfdf                          rjmp main
                                 
                                 // ----------------------------- SCORE MENU --------------------------------
                                 score_menu_setup:
0000cf 94f8                      CLI
                                 // convert score into digits r0 -> r2 (r0 contains 100s, r1 contains 10s, r2 contains 1s)
                                 // only needs to be done once in the score menu
0000d0 e000                      ldi r16, 0
0000d1 2e20                      mov r2, r16 //reset r0 -> r3
0000d2 2e30                      mov r3, r16
0000d3 2e40                      mov r4, r16
0000d4 2d05                      mov r16, r5 // move r5 to r16 so we can use cpi
                                 digit100: //get all the 100s digits by substracting 100 until r16 < 100
0000d5 3604                      cpi r16, 100
0000d6 f018                      brlo digit10
0000d7 5604                      subi r16, 100
0000d8 9423                      inc r2
0000d9 cffb                      rjmp digit100
                                 digit10: //get all the 10s digits by substracting 10 until r16 < 10
0000da 300a                      cpi r16, 10
0000db f018                      brlo digit1
0000dc 500a                      subi r16, 10
0000dd 9433                      inc r3
0000de cffb                      rjmp digit10
                                 digit1: //get all the 1s digits by substracting 1 until r16 =0
0000df 3000                      cpi r16, 0
0000e0 f019                      breq multiply_with_8
0000e1 5001                      subi r16, 1
0000e2 9443                      inc r4
0000e3 cffb                      rjmp digit1
                                 
                                 multiply_with_8:
0000e4 e038                      ldi r19, 8 // r1 should always be zero since 9*8 < 255
0000e5 9e23                      mul r2, r19
0000e6 2c20                      mov r2, r0
0000e7 9e33                      mul r3, r19
0000e8 2c30                      mov r3, r0
0000e9 9e43                      mul r4, r19
0000ea 2c40                      mov r4, r0
                                 
                                 score_menu:
0000eb e0d1                      ldi yh, high(0x010F) // last char should be send first on screen
0000ec e0cf                      ldi yl, low(0x010F)
0000ed e140                      ldi r20, 16 // 16 blocks fill the entire screen
0000ee e028                      ldi r18, 8 // select row
0000ef e288                      ldi r24, 40 // block offset initial value
0000f0 e060                      ldi r22, 0 // offset for each seperate line in memory
                                 
                                 Blockloop_score:
0000f1 e018                      	ldi r17, 8 // offset for each block in memory
0000f2 915a                      	ld r21, -y //predecrement Y and load char value pointed to by Y
0000f3 e075                      	ldi r23, 5 // only 5 pixels of each line of block is put on the stack
                                 	//calculate offset in table for char
0000f4 304c                      	cpi r20, 12
0000f5 f538                      	brsh zeros_on_screen //show empty blocks for r20 > 13 (after digits of score)
0000f6 3049                      	cpi r20, 9
0000f7 f468                      	brsh score_on_screen // show the score on the screen
0000f8 3047                      	cpi r20, 7
0000f9 f518                      	brsh zeros_on_screen // show empty blocks after the wod "score" on the top part of the screen
0000fa e0f4                      	ldi zh, high(ScoreTable<<1) // load adress table of char into Z
0000fb efea                      	ldi zl, low(ScoreTable<<1)
0000fc 0fe6                      	add zl, r22 // line offset
0000fd f408                      	brcc next_addition_score
0000fe 95f3                      	inc zh // carry for word
                                 	next_addition_score:
0000ff 0fe8                      	add zl, r24 // block offset
000100 f408                      	brcc load_data_score
000101 95f3                      	inc zh // carry for word
                                 	load_data_score:
                                 	// load column data
000102 9154                      	lpm r21, z
000103 5088                      	subi r24, 8 // decrease blockoffset with 8
000104 c019                      	rjmp BlockColloop_score
                                 
                                 	score_on_screen: // use register r2 -> r4 for each digit
000105 e0f5                      	ldi zh, high(DigitsTable<<1) // load adress table of char into Z
000106 e2ea                      	ldi zl, low(DigitsTable<<1)
000107 0fe6                      	add zl, r22 // line offset
000108 f408                      	brcc next_addition_digit
000109 95f3                      	inc zh // carry for word
                                 	next_addition_digit:
                                 
00010a 3049                      	cpi r20, 9
00010b f429                      	brne digit10_
00010c 0de2                      	add zl, r2 // block offset
00010d f408                      	brcc digit100_load
00010e 95f3                      	inc zh // carry for word
                                 	digit100_load:
00010f 9154                      	lpm r21, z
000110 c00d                      	rjmp BlockColloop_score
                                 
                                 	digit10_:
000111 304a                      	cpi r20, 10
000112 f429                      	brne digit1_
000113 0de3                      	add zl, r3 // block offset
000114 f408                      	brcc digit10_load
000115 95f3                      	inc zh // carry for word
                                 	digit10_load:
000116 9154                      	lpm r21, z
000117 c006                      	rjmp BlockColloop_score
                                 
                                 	digit1_:
000118 0de4                      	add zl, r4 // block offset
000119 f408                      	brcc digit1_load
00011a 95f3                      	inc zh // carry for word
                                 	digit1_load:
00011b 9154                      	lpm r21, z
00011c c001                      	rjmp BlockColloop_score
                                 
                                 	zeros_on_screen:
00011d e050                      	ldi r21, 0
                                 	// send bits to shift register
                                 	BlockColloop_score:
00011e 982b                      	cbi portb, 3 //turn pixel off
00011f 9488                      	clc // clear carry flag
000120 9557                      	ror r21
000121 f408                      	brcc CarryIs1_score //skip line if C = 0
000122 9a2b                      	sbi portb, 3 // turn pixel on
                                 	CarryIs1_score:
000123 982d                      	cbi portb, 5 // put pixel in shift register
000124 9a2d                      	sbi portb, 5
000125 957a                      	dec r23 // only 5 pixels of each line of block is put on the stack
000126 f7b9                      	brne BlockColloop_score
000127 954a                      	dec r20 // decrease block counter
000128 f641                      	brne blockloop_score
000129 c000                      	rjmp loop2_menu_score
                                 
                                 	loop2_menu_score:
00012a 1712                      		cp r17, r18
00012b f411                      		brne skip_menu_score
00012c 9a2b                      		sbi PORTB, 3
00012d c001                      		rjmp setrow_menu_score
                                 		skip_menu_score:
00012e 982b                      		cbi PORTB, 3
                                 		setrow_menu_score:
00012f 982d                      		cbi PORTB, 5
000130 9a2d                      		sbi PORTB, 5
000131 951a                      		dec r17
000132 f7b9                      		brne loop2_menu_score
                                 
000133 e140                      	ldi r20, 16 // reset r20 back to 16 for next line of screen
000134 e288                      	ldi r24, 40 // reset r24 back to 120 for next line of screen
000135 9a2c                      	sbi portb, 4
000136 982c                      	cbi portb, 4
000137 9563                      	inc r22 // increase line offset => next line of each block is read from memory for next line on display
000138 952a                      	dec r18 // decrease line "selector" of display
000139 f439                      	brne temp_Blockloop_score
                                 
                                 	// PRESS A TO START
00013a 9a58                      	SBI PORTD, 0 //check row 3
00013b 9a59                      	SBI PORTD, 1
00013c 985a                      	CBI PORTD, 2
00013d 9a5b                      	SBI PORTD, 3
00013e 9b4c                      		SBIS PIND, 4 // if 0 is pressed, jump to main menu
00013f cf2a                      		rjmp load_menu_setup
000140 cfaa                          rjmp score_menu
                                 
                                 	temp_Blockloop_score:
000141 cfaf                      	rjmp Blockloop_score
                                 
                                 
                                 //------------------------------ GET TONE ----------------------------------
                                 
                                 	get_tone:
                                 	// this function turns different positional regions of the joystick into discrete tones used for the buzzer (reg 21) (C->B)
                                 	// it also generates a value used to display the position of the joystick on the screen (reg 20)
                                 	// conversion from reg 21 value to frequency is done using matlab (see "note_to_freq_conv.m")
000142 9140 0079                 	lds r20, ADCH // MSB stored in ADCH due to values set in ADC setup
000144 3e46                      	cpi r20, 230 // compare the value from the adc to different preset values and assign a note/tone to each region
000145 f4b8                      	brsh note_C
000146 3d4c                      	cpi r20, 220
000147 f4c0                      	brsh note_Csharp
000148 3c46                      	cpi r20, 198
000149 f4c8                      	brsh note_D
00014a 3b40                      	cpi r20, 176
00014b f4d0                      	brsh note_Dsharp
00014c 394a                      	cpi r20, 154
00014d f4d8                      	brsh note_E
00014e 3844                      	cpi r20, 132
00014f f4e0                      	brsh note_F
000150 364e                      	cpi r20, 110
000151 f4e8                      	brsh note_Fsharp
000152 3548                      	cpi r20, 88
000153 f4f0                      	brsh note_G
000154 3442                      	cpi r20, 66
000155 f4f8                      	brsh note_Gsharp
000156 324c                      	cpi r20, 44
000157 f500                      	brsh note_A
000158 314e                      	cpi r20, 30
000159 f508                      	brsh note_Asharp
                                 
                                 	// note B
00015a e851                      	ldi r21, 129
00015b e042                      	ldi r20, 2
00015c 9508                      	ret
                                 
                                 	note_C:
00015d e151                      	ldi r21, 17
00015e e04d                      	ldi r20, 13
00015f 9508                          ret
                                 
                                 	note_Csharp:
000160 e15e                      	ldi r21, 30
000161 e04c                      	ldi r20, 12
000162 9508                      	ret
                                 
                                 	note_D:
000163 e25b                      	ldi r21, 43
000164 e04b                      	ldi r20, 11
000165 9508                      	ret
                                 
                                 	note_Dsharp:
000166 e357                      	ldi r21, 55
000167 e04a                      	ldi r20, 10
000168 9508                      	ret
                                 
                                 	note_E:
000169 e452                      	ldi r21, 66
00016a e049                      	ldi r20, 9
00016b 9508                      	ret
                                 
                                 	note_F:
00016c e45d                      	ldi r21, 77
00016d e048                      	ldi r20, 8
00016e 9508                      	ret
                                 
                                 	note_Fsharp:
00016f e557                      	ldi r21, 87
000170 e047                      	ldi r20, 7
000171 9508                      	ret
                                 
                                 	note_G:
000172 e651                      	ldi r21, 97
000173 e046                      	ldi r20, 6
000174 9508                      	ret
                                 
                                 	note_Gsharp:
000175 e65a                      	ldi r21, 106
000176 e045                      	ldi r20, 5
000177 9508                      	ret
                                 
                                 	note_A:
000178 e752                      	ldi r21, 114
000179 e044                      	ldi r20, 4
00017a 9508                      	ret
                                 
                                 	note_Asharp:
00017b e75a                      	ldi r21, 122
00017c e043                      	ldi r20, 3
00017d 9508                      	ret
                                 
                                 //-------------------------- DRAWING ---------------------------------
                                 
                                 	drawing: // IS CALLED FOR EACH ROW
                                 	// draws position of joystick + it's tail + borders
                                 
                                 	// HOW TO BORDERS WORK:
                                 	// - the memory has a copy of the 'level' it consists of a series of borders. the memory contains x, y, length of border but also for wich r25 values it should be drawn (this is to increase speed)
                                 	// - the x position is only for the bottom part of the border so to get the top part a substraction of 2 needs to be performed for each border
                                 	// - the borders are ordened in the memory in the oposite direction then how the level progresses since the display needs the pixels most to the right of the display first
                                 	// - the code runs through the borders and see which one needs to be drawn. it will get the length of the border or calculate it when the border crosses the screen edge
                                 	// - it will run through all the borders for the top half of the screen and again for the bottom half of the screen for each iteration (or value of r18)
                                 
00017e 2e44                      	mov r4, r20 // for speed (so pointer is faster correct) // r4 contains the current position of the joystick
                                 	continue_with_borders:
00017f 3218                      	cpi r17, 40 // only when r17 = 40 or 80 the pointer to the borders should be reset to the beginning of the dataset
000180 f011                      	breq load_adress
000181 3510                      	cpi r17, 80
000182 f439                      	brne next_border
                                 	load_adress:
000183 e0f5                      	ldi zh, high(Level<<1) // load adress of first border into z
000184 e7ea                      	ldi zl, low(Level<<1)
000185 e035                      	ldi r19, 5
000186 2e63                      	mov r6, r19 // counter for amount of borders ( r6 = #borders excluding border ending in 25 for y position)
000187 e238                      	ldi r19, 40
000188 2e73                      	mov r7, r19 // for bottom part of display (need to add 40 to get pixels to show on bottom part of screen)
000189 c000                      	rjmp next_border
                                 
                                 	next_border:
                                 	// if border not on r18 => no need to check it
00018a 9104                      	lpm r16, z //y position of border
00018b 3109                      	cpi r16, 25 // if y = 25 then end of border sequence is reached
00018c f041                      	breq temp_continue_drawing
00018d 1702                      	cp r16, r18 // only look at rest of data of border if its y-position is equal to the row that has to be drawn
00018e f019                      	breq set_top_row
00018f 5002                      	subi r16, 2 // check for upper part of border
000190 1702                      	cp r16, r18 // only look at rest of data of border if its y-position is equal to the row that has to be drawn
000191 f431                      	brne top_row_border // if y-position is not equal to r18, then it might be because the y-position belongs to the bottom part of the screen
                                 	set_top_row:
000192 e030                      	ldi r19, 0 // to check if its top or bottom of screen
000193 2e83                      	mov r8, r19 // r8 indicates if the border is part of the top or bottom part of the screen
000194 c00d                      	rjmp load_data_border
                                 	
                                 
                                 	temp_continue_drawing:
000195 e030                      	ldi r19, 0 // if x = 25 => went through all the borders so r6 should be 0
000196 2e63                      	mov r6, r19
000197 c044                      	rjmp continue_drawing
                                 
                                 	top_row_border:
000198 9503                      	inc r16 // add 2 to r16 to compensate for the -2 to check if r16 should be drawn on the top half of the screen
000199 9503                      	inc r16
00019a 5007                      	subi r16, 7 // substract 7 from y-position to check if border should be drawn on lower half of the screen
00019b 1702                      	cp r16, r18
00019c f019                      	breq set_bottom_row
00019d 5002                      	subi r16, 2 // check for upper part of border
00019e 1702                      	cp r16, r18
00019f f4d1                      	brne skip_border1
                                 	set_bottom_row:
0001a0 e031                      	ldi r19, 1
0001a1 2e83                      	mov r8, r19
                                 
                                 	load_data_border: // (r16:y, r10:x, r12:length)
0001a2 9631                      	adiw zl, 1 // +1
0001a3 90a4                      	lpm r10, z // min_r25
0001a4 9631                      	adiw zl, 1 // +2
0001a5 159a                      	cp r25, r10 // if r25 < min_r25 the border should not be drawn and is to be skipped
0001a6 f0a0                      	brlo skip_border2
0001a7 90a4                      	lpm r10, z // max_r25
0001a8 16a9                      	cp r10, r25 // if r25 > max_r25 the border should not be drawn and is to be skipped
0001a9 f088                      	brlo skip_border2
0001aa 9631                      	adiw z, 1 // +3
0001ab 90a4                      	lpm r10, z // x position of border
0001ac 9631                      	adiw z, 1 // +4
0001ad 90c4                      	lpm r12, z // length of border
0001ae 2cbc                      	mov r11, r12 // r11 is used to check how mnay pixels should be on	
                                 	// calculate new border length if border is outside of screen (this only has to be done for the right part of the screen, left part is solved by using r8)
                                 	// if this calculation is not done, other borders on the same screen line will not be drawn
0001af 2cfa                      	mov r15, r10 // r15 = x
0001b0 0cfc                      	add r15, r12 // r15 = x + length of border
0001b1 1af9                      	sub r15, r25 // r15 = x + length of border - r25
0001b2 2cd7                      	mov r13, r7 // r13 = 40
0001b3 94d3                      	inc r13 // r13 = 41
0001b4 14fd                      	cp r15, r13 // x + length of border - r25 >= 41 => border is beyond screen edge
0001b5 f050                      	brlo draw_border_bottom
0001b6 18f7                      	sub r15, r7 // r15 = x + length of border - r25 - 40 => length of border that is off the screen
0001b7 18bf                      	sub r11, r15 // r11 => length of border that is on the screen
0001b8 94b3                      	inc r11 // increase r11 so the border length matches the wanted border length
0001b9 c006                      	rjmp draw_border_bottom
                                 
                                 	skip_border1: // skip border after checking y-position (add total of 8 to z-pointer)
0001ba 9632                      	adiw z, 2
                                 	skip_border2: // skip border after checking min_r25 and max_r25
0001bb 9636                      	adiw z, 6 // add 6 to z-pointer
0001bc 95ca                      	dec r28 // if r28 = 0 => no borders on screen
0001bd 946a                      	dec r6 // if r6 = 0 => no borders need to be checked/drawn on that pixel line
0001be f0e9                      	breq continue_drawing
0001bf cfca                      	rjmp next_border
                                 
                                 	draw_border_bottom: 
0001c0 e031                      	ldi r19, 1 // add 40 to x position of border should be drawn on the bottom half of the screen
0001c1 1683                      	cp r8 , r19
0001c2 f409                      	brne draw_border
0001c3 0ca7                      	add r10, r7 // add 40 to shift border to bottom of screen
                                 	draw_border:
0001c4 e031                      	ldi r19, 1
0001c5 1683                      	cp r8, r19 // check if border is on top or bottom half of the screen
0001c6 f419                      	brne no_lower_limit
0001c7 3219                      	cpi r17, 41 // only draw for r17 < 41 if border is on the top half of the screen
0001c8 f098                      	brlo continue_drawing
0001c9 c002                      	rjmp borders
                                 	no_lower_limit:
0001ca 3219                      	cpi r17, 41 // only draw fr r17 >= 41 if border is on the bottom half of the screen
0001cb f480                      	brsh continue_drawing
                                 	borders:
0001cc 2d0a                      	mov r16, r10 // move x position to reg 16
0001cd 1b09                      	sub r16, r25 // substract r25 from x position => you get current x-position based on the shift caused by r25
0001ce 1710                      	cp r17, r16 // if r17 < r16 => no border for that pixel
0001cf f064                      	brlt continue_drawing
0001d0 0d0c                      	add r16, r12 // add length of border to r16
0001d1 1710                      	cp r17, r16 // of r17 < r16 => border should be drawn  => everything between the 'x-position - r25' and the 'x-position - r25 + length of the border' should be drawn 
0001d2 f448                      	brsh continue_drawing
0001d3 94ba                      	dec r11 // decrease amount of pixels that are left to draw for the border
                                 	// for score
0001d4 3015                      	cpi r17, 5
0001d5 f519                      	brne pixel
0001d6 2ee2                      	mov r14, r18
0001d7 1683                      	cp r8, r19
0001d8 f501                      	brne pixel
0001d9 e037                      	ldi r19, 7
0001da 0ee3                      	add r14, r19
0001db c01d                      	rjmp pixel
                                 
                                 	continue_drawing: // checks where position of joystick and tail should be drawn
0001dc e070                      	ldi r23, 0 //upper screen index
0001dd e288                      	ldi r24, 40 // lower screen index
0001de e0b0                      	ldi r27, 0 // LSB part of address of first pixel
0001df e0a0                      	ldi r26, 0 // MSB part of adress of first pixel
0001e0 321e                      	cpi r17, 46 // tail and joystick are only drawn on the left 5 pixels of the screen so any other r17 values can be ignored
0001e1 f4cc                      	brge no_pixel
0001e2 3218                      	cpi r17, 40
0001e3 f41c                      	brge next_pixel_tail
0001e4 3016                      	cpi r17, 6
0001e5 f008                      	brlo next_pixel_tail
0001e6 c014                      	rjmp no_pixel
                                 
                                 	next_pixel_tail:
                                 	// pixel tail is stored in r0->r4
0001e7 9573                      	inc r23 // increase upper screen index
0001e8 9583                      	inc r24 // increase lower screen index
0001e9 916d                      	ld r22, X+ // load data from r0 -> r4 using adress X and increase adress X
0001ea 30a6                      	cpi r26, 6 // if r4 is reached, end of tail registers reached, and no pixel should be drawn
0001eb f47c                      	brge no_pixel
0001ec 3068                      	cpi r22, 8 // if y-position of tail >= 8 it should be drawn on the bottom part of the screen
0001ed f428                      	brsh top_row
0001ee 1726                      	cp r18, r22 // if y-position of tail = r18 then check r17
0001ef f7b9                      	brne next_pixel_tail
0001f0 1717                      	cp r17, r23 // if r23 = r17 (correct x-position of tail) then draw tail
0001f1 f039                      	breq pixel
0001f2 cff4                      	rjmp next_pixel_tail // run through all the registers used for the tail and check if they should be drawn
                                 
                                 	top_row: //(7->11)
0001f3 5067                      	subi r22, 7 // substract 7 from the y-position of the tail so we get a  y-position we can use in the screen
0001f4 1726                      	cp r18, r22 // if y-position of tail = r18 then check r17
0001f5 f789                      	brne next_pixel_tail
0001f6 1718                      	cp r17, r24// if r21 = r17 (correct x-position of tail for bottom part of the screen) then draw tail
0001f7 f009                      	breq pixel
0001f8 cfee                      	rjmp next_pixel_tail
                                 
                                 	pixel: // turn pixel on
0001f9 9a2b                      	sbi portb, 3
0001fa c001                      	rjmp set_pixel_value
                                 	no_pixel: // turn pixel off	
0001fb 982b                      	cbi portb, 3
                                 	set_pixel_value: // push pixel on stack
0001fc 982d                      	cbi PORTB, 5
0001fd 9a2d                      	sbi PORTB, 5
0001fe 951a                      	dec r17 // decrease column counter
0001ff f051                      	breq stop_drawing
000200 3218                      	cpi r17, 40 // if r17 then the adress for the borders should be loaded in again and borders should be checked again
000201 f031                      	breq temp_continue_with_borders
000202 e030                      	ldi r19, 0
000203 1663                      	cp r6, r19 // if r6 =0 then all borders are checked and there is no need to check them again so only the tail is evaluated
000204 f2b9                      	breq continue_drawing
000205 16b3                      	cp r11, r19 // if r11 > 0 then more of the selected border should be drawn
000206 f411                      	brne temp_draw_border
000207 9634                      	adiw z, 4 // add 4 to z-pointer to point to the next border
                                 	temp_continue_with_borders:
000208 cf76                      	rjmp continue_with_borders // rjmp has larger range then conditional jump so used here
                                 	temp_draw_border:
000209 cfba                      	rjmp draw_border // rjmp has larger range then conditional jump so used here
                                 	stop_drawing:
00020a 9508                      	ret
                                 
                                 // ------------ TIMER INTERRUPT ----------------------------
                                 TIM0_OVF_ISR:
                                 	// checks just row 0 since only button C is used
00020b 9858                      	CBI PORTD, 0 //check row 0
00020c 9a59                      	SBI PORTD, 1
00020d 9a5a                      	SBI PORTD, 2
00020e 9a5b                      	SBI PORTD, 3
00020f 9b4c                      		SBIS PIND, 4 // if C is pressed, jump to output_C
000210 c003                      		rjmp buzzz
000211 9a43                      		sbi portc, 3 // turn led off if C is not pressed
000212 9a58                      		SBI PORTD, 0 // avoids return to menu unwanted
000213 9518                      	reti
                                 
                                 	buzzz:
000214 9843                      	cbi portc, 3
000215 bd56                      	out TCNT0, R21 // set value of buzzer
000216 9a19                      	SBI PINB, 1 // make buzzer go bzzzzzzzzzzzz
000217 9a58                      	SBI PORTD, 0 // avoids return to menu unwanted
000218 9518                      	reti
                                 
                                 TIM1_OVF: // higher r22 => faster
                                 // timer1 determines at which rate the borders shift to the left (also determines tail shift speed)
000219 9593                      	inc r25 // r25 works as a way to shift the borders across the screen
00021a 936f                      	push r22 // push r22 on stack since it is used here
00021b 92ff                      	push r15
00021c e66f                      	ldi r22, 0x6F // setup timer1 again to have the same refresh rate
00021d 9360 0085                 	sts TCNT1H, r22 
00021f ef6f                      	ldi r22, 0xFF
000220 9360 0084                 	sts TCNT1L, r22
000222 2c01                      	mov r0, r1 // shift tail y-positions from right to left for each refresh
000223 2c12                      	mov r1, r2
000224 2c23                      	mov r2, r3
000225 e060                      	ldi r22, 0
000226 9858                      	CBI PORTD, 0 //check row 0
000227 9a59                      	SBI PORTD, 1
000228 9a5a                      	SBI PORTD, 2
000229 9a5b                      	SBI PORTD, 3
00022a 9b4c                      		SBIS PIND, 4 // if C is pressed, jump to sound
00022b c005                      		rjmp sound
00022c 2e36                      		mov r3, r22 // if C is pressed, then a tail comes of the pixel that displays the position of the joystick, otherwise the tail dissapears
00022d 916f                      		pop r22
00022e 90ff                      		pop r15
00022f 9a58                      		SBI PORTD, 0 // avoids return to menu unwanted
000230 9518                      		reti
                                 	sound:
                                 	//score
000231 2cfe                      	mov r15, r14
000232 16f6                      	cp r15, r22 // if r14 = 0 => no boundaries so if C is not pressed +1
000233 f021                      	breq no_score
000234 94f3                      	inc r15
000235 16f4                      	cp r15, r20
000236 f409                      	brne no_score
000237 9453                      	inc r5
                                 	no_score:
000238 2c34                      	mov r3, r4 // if C is pressed, then a tail comes of the pixel that displays the position of the joystick, otherwise the tail dissapears
000239 90ff                      	pop r15
00023a 916f                      	pop r22
00023b 9a58                      	SBI PORTD, 0 // avoids return to menu unwanted
00023c 9518                      	reti
                                 
                                 
                                 
                                 	//------------ PREDEFINED CHARACTERS --------------------
                                 
                                 	CharTable: // bottom => top
                                 	// displays load menu
00023d 0800
00023e 0808
00023f 090e
000240 0e09                      	.db 0b00000000, 0b00001000, 0b00001000, 0b00001000, 0b00001110, 0b00001001, 0b00001001, 0b00001110  //P adress 0x0100
000241 0900
000242 0a09
000243 090e
000244 0e09                      	.db 0b00000000, 0b00001001, 0b00001001, 0b00001010, 0b00001110, 0b00001001, 0b00001001, 0b00001110  //R
000245 0f00
000246 0808
000247 080e
000248 0f08                      	.db 0b00000000, 0b00001111, 0b00001000, 0b00001000, 0b00001110, 0b00001000, 0b00001000, 0b00001111  //E
000249 0e00
00024a 0101
00024b 0806
00024c 0708                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000110, 0b00001000, 0b00001000, 0b00000111  //S
00024d 0e00
00024e 0101
00024f 0806
000250 0708                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000110, 0b00001000, 0b00001000, 0b00000111  //S
000251 0000
000252 0000
000253 0000
000254 0000                      	.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000  // space
000255 0900
000256 0909
000257 090f
000258 0609                      	.db 0b00000000, 0b00001001, 0b00001001, 0b00001001, 0b00001111, 0b00001001, 0b00001001, 0b00000110  //A
000259 0000
00025a 0000
00025b 0000
00025c 0000                      	.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000  // space
00025d 0400
00025e 0404
00025f 0404
000260 1f04                      	.db 0b00000000, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00011111  //T
000261 0600
000262 0909
000263 0909
000264 0609                      	.db 0b00000000, 0b00000110, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00000110  //O
000265 0000
000266 0000
000267 0000
000268 0000                      	.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000  // space
000269 0e00
00026a 0101
00026b 0806
00026c 0708                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000110, 0b00001000, 0b00001000, 0b00000111  //S
00026d 0400
00026e 0404
00026f 0404
000270 1f04                      	.db 0b00000000, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00011111  //T
000271 0900
000272 0909
000273 090f
000274 0609                      	.db 0b00000000, 0b00001001, 0b00001001, 0b00001001, 0b00001111, 0b00001001, 0b00001001, 0b00000110  //A
000275 0900
000276 0a09
000277 090e
000278 0e09                      	.db 0b00000000, 0b00001001, 0b00001001, 0b00001010, 0b00001110, 0b00001001, 0b00001001, 0b00001110  //R
000279 0400
00027a 0404
00027b 0404
00027c 1f04                      	.db 0b00000000, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00011111  //T adress 0x010F
                                 
                                 	ScoreTable: // displays the word "score"
00027d 0e00
00027e 0101
00027f 0806
000280 0708                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000110, 0b00001000, 0b00001000, 0b00000111  //S
000281 0700
000282 0808
000283 0808
000284 0708                      	.db 0b00000000, 0b00000111, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000111  //C
000285 0600
000286 0909
000287 0909
000288 0609                      	.db 0b00000000, 0b00000110, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00000110  //O
000289 0900
00028a 0a09
00028b 090e
00028c 0e09                      	.db 0b00000000, 0b00001001, 0b00001001, 0b00001010, 0b00001110, 0b00001001, 0b00001001, 0b00001110  //R
00028d 0f00
00028e 0808
00028f 080e
000290 0f08                      	.db 0b00000000, 0b00001111, 0b00001000, 0b00001000, 0b00001110, 0b00001000, 0b00001000, 0b00001111  //E
000291 0000
000292 0008
000293 0000
000294 0008                      	.db 0b00000000, 0b00000000, 0b00001000, 0b00000000, 0b00000000, 0b00000000, 0b00001000, 0b00000000  //:
                                 
                                 	DigitsTable:
000295 0600
000296 0909
000297 0909
000298 0609                      	.db 0b00000000, 0b00000110, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00001001, 0b00000110 //0
000299 0200
00029a 0202
00029b 0202
00029c 0206                      	.db 0b00000000, 0b00000010, 0b00000010, 0b00000010, 0b00000010, 0b00000010, 0b00000110, 0b00000010 //1
00029d 0f00
00029e 0408
00029f 0102
0002a0 0e01                      	.db 0b00000000, 0b00001111, 0b00001000, 0b00000100, 0b00000010, 0b00000001, 0b00000001, 0b00001110 //2
0002a1 0e00
0002a2 0101
0002a3 0107
0002a4 0e01                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000111, 0b00000001, 0b00000001, 0b00001110 //3
0002a5 0200
0002a6 0f02
0002a7 080a
0002a8 0808                      	.db 0b00000000, 0b00000010, 0b00000010, 0b00001111, 0b00001010, 0b00001000, 0b00001000, 0b00001000 //4
0002a9 0e00
0002aa 0101
0002ab 0806
0002ac 0f08                      	.db 0b00000000, 0b00001110, 0b00000001, 0b00000001, 0b00000110, 0b00001000, 0b00001000, 0b00001111 //5
0002ad 0600
0002ae 0909
0002af 080e
0002b0 0608                      	.db 0b00000000, 0b00000110, 0b00001001, 0b00001001, 0b00001110, 0b00001000, 0b00001000, 0b00000110 //6
0002b1 0400
0002b2 0404
0002b3 0204
0002b4 0f01                      	.db 0b00000000, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000010, 0b00000001, 0b00001111 //7
0002b5 0600
0002b6 0909
0002b7 0906
0002b8 0609                      	.db 0b00000000, 0b00000110, 0b00001001, 0b00001001, 0b00000110, 0b00001001, 0b00001001, 0b00000110 //8
0002b9 0600
0002ba 0101
0002bb 0907
0002bc 0609                      	.db 0b00000000, 0b00000110, 0b00000001, 0b00000001, 0b00000111, 0b00001001, 0b00001001, 0b00000110 //9
                                 
                                 	Level:
0002bd 2909
0002be 5156
0002bf 0005
0002c0 0000                      	.db 9, 41, 86, 81, 5, 0, 0, 0
0002c1 1e0b
0002c2 4650
0002c3 000a
0002c4 0000                      	.db 11, 30, 80, 70, 10, 0, 0, 0 
0002c5 1505
0002c6 3d41
0002c7 0004
0002c8 0000                      	.db 5, 21, 65, 61, 4, 0, 0, 0
0002c9 0503
0002ca 2d32
0002cb 0005
0002cc 0000                      	.db 3, 5, 50, 45, 5, 0, 0, 0
0002cd 000d
0002ce 282a
0002cf 0002
0002d0 0000                      	.db 13, 0, 42, 40, 2, 0, 0, 0 
0002d1 0019
0002d2 0000
0002d3 0000
0002d4 0000                      	.db 25, 0, 0, 0, 0, 0, 0, 0
                                 	//y, min_r25, max_r25, x, length
                                 	// should be in reverse order
                                 	// us of limits for r25 to minimize screen flickering
                                 	// min_r25 = x - 40
                                 	// max_r25 = x + length
                                 	// assume: no 2 borders on the same pixel column
                                 
                                 	// MAX 16 BORDERS => ELSE OVERFLOW ON R28
                                 	// max_r25 can be maximum 215 since we need to add 40 if its drawn on bottom half of screen
                                 	
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   1 y  :   2 z  :  15 r0 :   5 r1 :   3 r2 :   8 r3 :   9 r4 :   8 
r5 :   3 r6 :   4 r7 :   4 r8 :   5 r9 :   0 r10:   8 r11:   5 r12:   4 
r13:   3 r14:   4 r15:  13 r16:  55 r17:  24 r18:  17 r19:  24 r20:  44 
r21:  25 r22:  22 r23:   7 r24:  11 r25:   8 r26:   2 r27:   1 r28:   5 
r29:   2 r30:  14 r31:  12 
Registers used: 34 out of 35 (97.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  12 adiw  :   7 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  10 brcs  :   0 break :   0 breq  :  13 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   1 brmi  :   0 
brne  :  27 brpl  :   0 brsh  :  17 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   2 cbi   :  27 cbr   :   0 
clc   :   2 clh   :   0 cli   :   2 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  23 cpc   :   0 
cpi   :  33 cpse  :   0 dec   :  14 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :  22 jmp   :   0 
ld    :   3 ldd   :   0 ldi   :  93 lds   :   1 lpm   :  20 lsl   :   0 
lsr   :   0 mov   :  31 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :   4 pop   :   4 
push  :   2 rcall :   0 ret   :  13 reti  :   4 rjmp  :  39 rol   :   0 
ror   :   2 sbc   :   0 sbci  :   0 sbi   :  62 sbic  :   0 sbis  :   5 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  14 
sub   :   4 subi  :   9 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005aa   1086    304   1390   32768   4.2%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
